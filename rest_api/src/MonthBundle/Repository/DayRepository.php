<?php

namespace MonthBundle\Repository;

use Doctrine\ORM\EntityRepository;
use MonthBundle\Entity\Day;


/**
 * DayRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

class DayRepository extends EntityRepository
{

  private function dayRepo(){
    return $this->getEntityManager()->getRepository('MonthBundle:Day');
  }

  private function makeQuery(){
    return $this->dayRepo()->createQueryBuilder('d');
  }

  public function saveDay($day){
    $em = $this->getEntityManager();
    if($day){
      //$em->persist($newDay); testing right now so no save
    }
    return $day;
  }

  public function saveDayRange($dayRange){
    $result = array();
    $em = $this->getEntityManager();
    foreach($dayRange as $d){
      $start = date_create($d['day']);
      $days = $this->getDay($start);
      if(!$days){
        $newDay = Day::createNewDay($d);
        if($newDay){
          $em->persist($newDay);
          array_push($result, $newDay);
        }
      }
      else{
        foreach($days as $day){
          if(!$day){ echo("day was not valid"); };
          $day->setSinglePrice($d['single']['price']);
          $day->setSingleAvailable($d['single']['available']);
          $day->setDoublePrice($d['double']['price']);
          $day->setDoubleAvailable($d['double']['available']);
          $em->persist($day);
          array_push($result, $day);
        }
      }
    }
    $em->flush();
    return $result;
  }

  public function allDaysForMonth($start, $end){

    $result = $this->makeQuery()->where('d.day BETWEEN :start AND :end')
      ->setParameter('start', $start->format('Y-m-d'))
      ->setParameter('end', $end->format('Y-m-d'))
      ->orderBy('d.day', 'ASC')->getQuery()->getResult();
    return $result;

  }

  public function getDay($start){
    $query = $this->makeQuery()
      ->where('d.day = :start')
      ->setParameter('start', $start->format('Y-m-d'))
      ->orderBy('d.day', 'ASC')->getQuery();
    $days = $query->getResult();
    return $days;
  }

  public function updateDay($day){

  }

  public function updateDayRange($dayRange){
    $em = $this->getEntityManager();
    $result = array();
    foreach($dayRange as $d){
      if($d['id']){
        $day = $this->dayRepo()->find($d['id']);
        $day->setSinglePrice($d['single']['price']);
        $day->setSingleAvailable($d['single']['available']);
        $day->setDoublePrice($d['double']['price']);
        $day->setDoubleAvailable($d['double']['available']);
        $em->persist($day);
        array_push($result, $day);
      }
      $em->flush();
    }
    return $result;
  }


}
